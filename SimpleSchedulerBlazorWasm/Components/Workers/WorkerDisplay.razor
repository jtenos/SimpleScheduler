@using SimpleSchedulerApiModels

<div class="worker-box">
    @if (Worker is not null)
    {
        <div class="card">
            <div class="card-header">
                <h5 class="card-title">@Worker.Worker.WorkerName</h5>
            </div>
            <div class="card-body worker-card-body">

                <ul class="list-group list-group-flush">
                    <li class="list-group-item">
                        <h6 class="card-subtitle mb-2 text-muted">@Worker.Worker.DetailedDescription</h6>
                        <div><strong>@Worker.Worker.DirectoryName/</strong>@Worker.Worker.Executable</div>
                        <div><em>@Worker.Worker.ArgumentValues</em></div>
                        <div style="font-size: smaller;">Timeout: @Worker.Worker.TimeoutMinutes minutes</div>
                        @if (Worker.Worker.ParentWorkerID.HasValue)
                        {
                            <div style="font-size: smaller;"><em>Child of @(AllWorkers.SingleOrDefault(w => w.ID == Worker?.Worker.ParentWorkerID)?.WorkerName)</em></div>
                        }
                        @if (!string.IsNullOrWhiteSpace(Worker.Worker.EmailOnSuccess))
                        {
                            <div style="font-size: smaller;"><strong>Email on Success: @Worker.Worker.EmailOnSuccess</strong></div>
                        }
                    </li>
                    @if (Worker.Worker.IsActive)
                    {
                        <WorkerSchedules Worker="Worker" WorkerDisplayComponent="this" AllWorkers="AllWorkers" />
                    }
                </ul>
            </div>
            <div class="card-footer d-flex justify-content-around">
                @if (Worker.Worker.IsActive)
                {
                    <Button Color="Color.Warning" Size="Size.Small" @onclick="EditWorker">
                        <i class="bi bi-pencil"></i>
                        Edit
                    </Button>
                }
                @if (Worker.Worker.IsActive)
                {
                    if (AllWorkers.Any(w => w.ParentWorkerID == Worker.Worker.ID))
                    {
                        <Button Color="Color.Secondary" Size="Size.Small" Outline title="This worker has children. Unable to delete.">
                            <i class="bi bi-trash"></i>
                            Delete
                        </Button>
                    }
                    else
                    {
                        <Button Color="Color.Danger" Size="Size.Small" @onclick="DeleteWorker">
                            <i class="bi bi-trash"></i>
                            Delete
                        </Button>
                    }
                }
                else
                {
                    <Button Color="Color.Primary" Size="Size.Small" @onclick="ReactivateWorker">
                        <i class="bi bi-box-arrow-up-left"></i>
                        Reactivate
                    </Button>
                }
                @if (Worker.Worker.IsActive)
                {
                    <Button Color="Color.Success" Size="Size.Small" @onclick="RunWorker">
                        <i class="bi bi-play"></i>
                        Run
                    </Button>
                }
                <Button Color="Color.Success" Size="Size.Small" Outline @onclick="GoToJobs">
                    <i class="bi bi-person-workspace"></i>
                    Jobs
                </Button>
            </div>
        </div>
    }
</div>
