using Microsoft.AspNetCore.Mvc;
using System.Diagnostics;
using System.Reflection;

// Run this, then copy the result into SimpleSchedulerApiProxy/ApiProxy.cs

Assembly apiAssembly = typeof(SimpleSchedulerBlazor.Server.Controllers.HomeController).Assembly;

string tempFileName = Path.GetTempFileName();
StreamWriter writer = new(tempFileName);

Type[] controllerTypes = apiAssembly.GetTypes().Where(t => typeof(ControllerBase).IsAssignableFrom(t)).ToArray();

writer.WriteLine("// Auto-generated by ProxyGenerator");
writer.WriteLine();
writer.WriteLine("using System.Net.Http.Json;");
writer.WriteLine("using SimpleSchedulerModels.ApiModels.Home;");
writer.WriteLine("using SimpleSchedulerModels.ApiModels.Login;");
writer.WriteLine("using SimpleSchedulerModels.ApiModels.Jobs;");
writer.WriteLine("using SimpleSchedulerModels.ApiModels.Schedules;");
writer.WriteLine("using SimpleSchedulerModels.ApiModels.Workers;");
writer.WriteLine("using Microsoft.Extensions.DependencyInjection;");
writer.WriteLine();
writer.WriteLine("namespace SimpleSchedulerApiProxy;");
writer.WriteLine(@$"
public static class ProxyExtensions
{{
    public static void AddApiProxies(this IServiceCollection serviceCollection)
    {{");
foreach (Type controllerType in controllerTypes)
{
    writer.WriteLine(@$"        serviceCollection.AddScoped<{controllerType.Name.Replace("Controller", "")}Proxy>();");
}
writer.WriteLine(@$"    }}
}}");

foreach (Type controllerType in controllerTypes)
{
    AppendClassTemplate(controllerType);
}

void AppendClassTemplate(Type controllerType)
{
    writer.WriteLine(@$"
public class {controllerType.Name.Replace("Controller", "")}Proxy
{{
    private readonly HttpClient _httpClient;

    public {controllerType.Name.Replace("Controller", "")}Proxy(HttpClient httpClient)
    {{
        _httpClient = httpClient;
    }}");
    foreach (MethodInfo actionMethod in controllerType.GetMethods(BindingFlags.Public | BindingFlags.Instance).Where(m => m.GetCustomAttribute<HttpPostAttribute>() is not null))
    {
        AppendMethodTemplate(controllerType.Name.Replace("Controller", ""), actionMethod);
    }
    writer.WriteLine($@"}}");
}

void AppendMethodTemplate(string controllerUrlName, MethodInfo actionMethod)
{
    string actionName = actionMethod.Name;
    string requestType = $"{actionName}Request";
    string responseType = $"{actionName}Response";
    writer.WriteLine($@"
    public async Task<(bool Success, string? ErrorMessage, {responseType}? Response)> {actionName}({requestType} request)
    {{
        HttpResponseMessage responseMessage = await _httpClient.PostAsJsonAsync(""api/{controllerUrlName}/{actionName}"", request);
        if (responseMessage.IsSuccessStatusCode)
        {{
            {responseType} response = (await responseMessage.Content.ReadFromJsonAsync<{responseType}>())!;
            return (Success: true, ErrorMessage: null, Response: response);
        }}
        else
        {{
            return (Success: false, ErrorMessage: await responseMessage.Content.ReadAsStringAsync() ?? ""Unknown Error"", Response: null);
        }}
    }}");
}

writer.Dispose();

// Windows only, adjust if needed:
Process.Start("notepad.exe", tempFileName);
