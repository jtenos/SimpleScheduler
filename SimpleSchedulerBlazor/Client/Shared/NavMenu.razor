@using SimpleSchedulerApiProxy
@using SimpleSchedulerModels.ApiModels.Home
@inject HomeProxy HomeProxy

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Scheduler (@EnvironmentName)</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="jobs" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Jobs
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="schedules">
                <span class="oi oi-plus" aria-hidden="true"></span> Schedules
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="workers">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Workers
            </NavLink>
        </div>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    public string EnvironmentName { get; set; } = "...";

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        var envResult = await HomeProxy.EnvironmentName(new EnvironmentNameRequest());
        if (envResult.Success)
        {
            EnvironmentName = envResult.Response!.EnvironmentName;
        }
        else
        {
                EnvironmentName = "Unknown";
        }
    }
}
