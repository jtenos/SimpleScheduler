// Auto-generated by ProxyGenerator

using System.Net.Http.Json;
using SimpleSchedulerModels.ApiModels.Home;
using SimpleSchedulerModels.ApiModels.Login;
using SimpleSchedulerModels.ApiModels.Jobs;
using SimpleSchedulerModels.ApiModels.Schedules;
using SimpleSchedulerModels.ApiModels.Workers;
using Microsoft.Extensions.DependencyInjection;

namespace SimpleSchedulerApiProxy;

public static class ProxyExtensions
{
    public static void AddApiProxies(this IServiceCollection serviceCollection)
    {
        serviceCollection.AddScoped<HomeProxy>();
        serviceCollection.AddScoped<JobsProxy>();
        serviceCollection.AddScoped<LoginProxy>();
        serviceCollection.AddScoped<SchedulesProxy>();
        serviceCollection.AddScoped<WorkersProxy>();
    }
}

public class HomeProxy
{
    private readonly HttpClient _httpClient;

    public HomeProxy(HttpClient httpClient)
    {
        _httpClient = httpClient;
    }

    public async Task<(bool Success, string? ErrorMessage, EnvironmentNameResponse? Response)> EnvironmentName(EnvironmentNameRequest request)
    {
        HttpResponseMessage responseMessage = await _httpClient.PostAsJsonAsync("api/Home/EnvironmentName", request);
        if (responseMessage.IsSuccessStatusCode)
        {
            EnvironmentNameResponse response = (await responseMessage.Content.ReadFromJsonAsync<EnvironmentNameResponse>())!;
            return (Success: true, ErrorMessage: null, Response: response);
        }
        else
        {
            return (Success: false, ErrorMessage: await responseMessage.Content.ReadAsStringAsync() ?? "Unknown Error", Response: null);
        }
    }

    public async Task<(bool Success, string? ErrorMessage, HelloThereResponse? Response)> HelloThere(HelloThereRequest request)
    {
        HttpResponseMessage responseMessage = await _httpClient.PostAsJsonAsync("api/Home/HelloThere", request);
        if (responseMessage.IsSuccessStatusCode)
        {
            HelloThereResponse response = (await responseMessage.Content.ReadFromJsonAsync<HelloThereResponse>())!;
            return (Success: true, ErrorMessage: null, Response: response);
        }
        else
        {
            return (Success: false, ErrorMessage: await responseMessage.Content.ReadAsStringAsync() ?? "Unknown Error", Response: null);
        }
    }

    public async Task<(bool Success, string? ErrorMessage, UtcNowResponse? Response)> UtcNow(UtcNowRequest request)
    {
        HttpResponseMessage responseMessage = await _httpClient.PostAsJsonAsync("api/Home/UtcNow", request);
        if (responseMessage.IsSuccessStatusCode)
        {
            UtcNowResponse response = (await responseMessage.Content.ReadFromJsonAsync<UtcNowResponse>())!;
            return (Success: true, ErrorMessage: null, Response: response);
        }
        else
        {
            return (Success: false, ErrorMessage: await responseMessage.Content.ReadAsStringAsync() ?? "Unknown Error", Response: null);
        }
    }
}

public class JobsProxy
{
    private readonly HttpClient _httpClient;

    public JobsProxy(HttpClient httpClient)
    {
        _httpClient = httpClient;
    }

    public async Task<(bool Success, string? ErrorMessage, GetJobsResponse? Response)> GetJobs(GetJobsRequest request)
    {
        HttpResponseMessage responseMessage = await _httpClient.PostAsJsonAsync("api/Jobs/GetJobs", request);
        if (responseMessage.IsSuccessStatusCode)
        {
            GetJobsResponse response = (await responseMessage.Content.ReadFromJsonAsync<GetJobsResponse>())!;
            return (Success: true, ErrorMessage: null, Response: response);
        }
        else
        {
            return (Success: false, ErrorMessage: await responseMessage.Content.ReadAsStringAsync() ?? "Unknown Error", Response: null);
        }
    }

    public async Task<(bool Success, string? ErrorMessage, CancelJobResponse? Response)> CancelJob(CancelJobRequest request)
    {
        HttpResponseMessage responseMessage = await _httpClient.PostAsJsonAsync("api/Jobs/CancelJob", request);
        if (responseMessage.IsSuccessStatusCode)
        {
            CancelJobResponse response = (await responseMessage.Content.ReadFromJsonAsync<CancelJobResponse>())!;
            return (Success: true, ErrorMessage: null, Response: response);
        }
        else
        {
            return (Success: false, ErrorMessage: await responseMessage.Content.ReadAsStringAsync() ?? "Unknown Error", Response: null);
        }
    }

    public async Task<(bool Success, string? ErrorMessage, AcknowledgeErrorResponse? Response)> AcknowledgeError(AcknowledgeErrorRequest request)
    {
        HttpResponseMessage responseMessage = await _httpClient.PostAsJsonAsync("api/Jobs/AcknowledgeError", request);
        if (responseMessage.IsSuccessStatusCode)
        {
            AcknowledgeErrorResponse response = (await responseMessage.Content.ReadFromJsonAsync<AcknowledgeErrorResponse>())!;
            return (Success: true, ErrorMessage: null, Response: response);
        }
        else
        {
            return (Success: false, ErrorMessage: await responseMessage.Content.ReadAsStringAsync() ?? "Unknown Error", Response: null);
        }
    }

    public async Task<(bool Success, string? ErrorMessage, GetDetailedMessageResponse? Response)> GetDetailedMessage(GetDetailedMessageRequest request)
    {
        HttpResponseMessage responseMessage = await _httpClient.PostAsJsonAsync("api/Jobs/GetDetailedMessage", request);
        if (responseMessage.IsSuccessStatusCode)
        {
            GetDetailedMessageResponse response = (await responseMessage.Content.ReadFromJsonAsync<GetDetailedMessageResponse>())!;
            return (Success: true, ErrorMessage: null, Response: response);
        }
        else
        {
            return (Success: false, ErrorMessage: await responseMessage.Content.ReadAsStringAsync() ?? "Unknown Error", Response: null);
        }
    }
}

public class LoginProxy
{
    private readonly HttpClient _httpClient;

    public LoginProxy(HttpClient httpClient)
    {
        _httpClient = httpClient;
    }

    public async Task<(bool Success, string? ErrorMessage, IsLoggedInResponse? Response)> IsLoggedIn(IsLoggedInRequest request)
    {
        HttpResponseMessage responseMessage = await _httpClient.PostAsJsonAsync("api/Login/IsLoggedIn", request);
        if (responseMessage.IsSuccessStatusCode)
        {
            IsLoggedInResponse response = (await responseMessage.Content.ReadFromJsonAsync<IsLoggedInResponse>())!;
            return (Success: true, ErrorMessage: null, Response: response);
        }
        else
        {
            return (Success: false, ErrorMessage: await responseMessage.Content.ReadAsStringAsync() ?? "Unknown Error", Response: null);
        }
    }

    public async Task<(bool Success, string? ErrorMessage, GetAllUserEmailsResponse? Response)> GetAllUserEmails(GetAllUserEmailsRequest request)
    {
        HttpResponseMessage responseMessage = await _httpClient.PostAsJsonAsync("api/Login/GetAllUserEmails", request);
        if (responseMessage.IsSuccessStatusCode)
        {
            GetAllUserEmailsResponse response = (await responseMessage.Content.ReadFromJsonAsync<GetAllUserEmailsResponse>())!;
            return (Success: true, ErrorMessage: null, Response: response);
        }
        else
        {
            return (Success: false, ErrorMessage: await responseMessage.Content.ReadAsStringAsync() ?? "Unknown Error", Response: null);
        }
    }

    public async Task<(bool Success, string? ErrorMessage, SubmitEmailResponse? Response)> SubmitEmail(SubmitEmailRequest request)
    {
        HttpResponseMessage responseMessage = await _httpClient.PostAsJsonAsync("api/Login/SubmitEmail", request);
        if (responseMessage.IsSuccessStatusCode)
        {
            SubmitEmailResponse response = (await responseMessage.Content.ReadFromJsonAsync<SubmitEmailResponse>())!;
            return (Success: true, ErrorMessage: null, Response: response);
        }
        else
        {
            return (Success: false, ErrorMessage: await responseMessage.Content.ReadAsStringAsync() ?? "Unknown Error", Response: null);
        }
    }

    public async Task<(bool Success, string? ErrorMessage, ValidateEmailResponse? Response)> ValidateEmail(ValidateEmailRequest request)
    {
        HttpResponseMessage responseMessage = await _httpClient.PostAsJsonAsync("api/Login/ValidateEmail", request);
        if (responseMessage.IsSuccessStatusCode)
        {
            ValidateEmailResponse response = (await responseMessage.Content.ReadFromJsonAsync<ValidateEmailResponse>())!;
            return (Success: true, ErrorMessage: null, Response: response);
        }
        else
        {
            return (Success: false, ErrorMessage: await responseMessage.Content.ReadAsStringAsync() ?? "Unknown Error", Response: null);
        }
    }
}

public class SchedulesProxy
{
    private readonly HttpClient _httpClient;

    public SchedulesProxy(HttpClient httpClient)
    {
        _httpClient = httpClient;
    }

    public async Task<(bool Success, string? ErrorMessage, GetAllSchedulesResponse? Response)> GetAllSchedules(GetAllSchedulesRequest request)
    {
        HttpResponseMessage responseMessage = await _httpClient.PostAsJsonAsync("api/Schedules/GetAllSchedules", request);
        if (responseMessage.IsSuccessStatusCode)
        {
            GetAllSchedulesResponse response = (await responseMessage.Content.ReadFromJsonAsync<GetAllSchedulesResponse>())!;
            return (Success: true, ErrorMessage: null, Response: response);
        }
        else
        {
            return (Success: false, ErrorMessage: await responseMessage.Content.ReadAsStringAsync() ?? "Unknown Error", Response: null);
        }
    }

    public async Task<(bool Success, string? ErrorMessage, GetScheduleResponse? Response)> GetSchedule(GetScheduleRequest request)
    {
        HttpResponseMessage responseMessage = await _httpClient.PostAsJsonAsync("api/Schedules/GetSchedule", request);
        if (responseMessage.IsSuccessStatusCode)
        {
            GetScheduleResponse response = (await responseMessage.Content.ReadFromJsonAsync<GetScheduleResponse>())!;
            return (Success: true, ErrorMessage: null, Response: response);
        }
        else
        {
            return (Success: false, ErrorMessage: await responseMessage.Content.ReadAsStringAsync() ?? "Unknown Error", Response: null);
        }
    }

    public async Task<(bool Success, string? ErrorMessage, DeleteScheduleResponse? Response)> DeleteSchedule(DeleteScheduleRequest request)
    {
        HttpResponseMessage responseMessage = await _httpClient.PostAsJsonAsync("api/Schedules/DeleteSchedule", request);
        if (responseMessage.IsSuccessStatusCode)
        {
            DeleteScheduleResponse response = (await responseMessage.Content.ReadFromJsonAsync<DeleteScheduleResponse>())!;
            return (Success: true, ErrorMessage: null, Response: response);
        }
        else
        {
            return (Success: false, ErrorMessage: await responseMessage.Content.ReadAsStringAsync() ?? "Unknown Error", Response: null);
        }
    }

    public async Task<(bool Success, string? ErrorMessage, ReactivateScheduleResponse? Response)> ReactivateSchedule(ReactivateScheduleRequest request)
    {
        HttpResponseMessage responseMessage = await _httpClient.PostAsJsonAsync("api/Schedules/ReactivateSchedule", request);
        if (responseMessage.IsSuccessStatusCode)
        {
            ReactivateScheduleResponse response = (await responseMessage.Content.ReadFromJsonAsync<ReactivateScheduleResponse>())!;
            return (Success: true, ErrorMessage: null, Response: response);
        }
        else
        {
            return (Success: false, ErrorMessage: await responseMessage.Content.ReadAsStringAsync() ?? "Unknown Error", Response: null);
        }
    }

    public async Task<(bool Success, string? ErrorMessage, CreateScheduleResponse? Response)> CreateSchedule(CreateScheduleRequest request)
    {
        HttpResponseMessage responseMessage = await _httpClient.PostAsJsonAsync("api/Schedules/CreateSchedule", request);
        if (responseMessage.IsSuccessStatusCode)
        {
            CreateScheduleResponse response = (await responseMessage.Content.ReadFromJsonAsync<CreateScheduleResponse>())!;
            return (Success: true, ErrorMessage: null, Response: response);
        }
        else
        {
            return (Success: false, ErrorMessage: await responseMessage.Content.ReadAsStringAsync() ?? "Unknown Error", Response: null);
        }
    }

    public async Task<(bool Success, string? ErrorMessage, UpdateScheduleResponse? Response)> UpdateSchedule(UpdateScheduleRequest request)
    {
        HttpResponseMessage responseMessage = await _httpClient.PostAsJsonAsync("api/Schedules/UpdateSchedule", request);
        if (responseMessage.IsSuccessStatusCode)
        {
            UpdateScheduleResponse response = (await responseMessage.Content.ReadFromJsonAsync<UpdateScheduleResponse>())!;
            return (Success: true, ErrorMessage: null, Response: response);
        }
        else
        {
            return (Success: false, ErrorMessage: await responseMessage.Content.ReadAsStringAsync() ?? "Unknown Error", Response: null);
        }
    }
}

public class WorkersProxy
{
    private readonly HttpClient _httpClient;

    public WorkersProxy(HttpClient httpClient)
    {
        _httpClient = httpClient;
    }

    public async Task<(bool Success, string? ErrorMessage, GetAllWorkersResponse? Response)> GetAllWorkers(GetAllWorkersRequest request)
    {
        HttpResponseMessage responseMessage = await _httpClient.PostAsJsonAsync("api/Workers/GetAllWorkers", request);
        if (responseMessage.IsSuccessStatusCode)
        {
            GetAllWorkersResponse response = (await responseMessage.Content.ReadFromJsonAsync<GetAllWorkersResponse>())!;
            return (Success: true, ErrorMessage: null, Response: response);
        }
        else
        {
            return (Success: false, ErrorMessage: await responseMessage.Content.ReadAsStringAsync() ?? "Unknown Error", Response: null);
        }
    }

    public async Task<(bool Success, string? ErrorMessage, GetWorkerResponse? Response)> GetWorker(GetWorkerRequest request)
    {
        HttpResponseMessage responseMessage = await _httpClient.PostAsJsonAsync("api/Workers/GetWorker", request);
        if (responseMessage.IsSuccessStatusCode)
        {
            GetWorkerResponse response = (await responseMessage.Content.ReadFromJsonAsync<GetWorkerResponse>())!;
            return (Success: true, ErrorMessage: null, Response: response);
        }
        else
        {
            return (Success: false, ErrorMessage: await responseMessage.Content.ReadAsStringAsync() ?? "Unknown Error", Response: null);
        }
    }

    public async Task<(bool Success, string? ErrorMessage, DeleteWorkerResponse? Response)> DeleteWorker(DeleteWorkerRequest request)
    {
        HttpResponseMessage responseMessage = await _httpClient.PostAsJsonAsync("api/Workers/DeleteWorker", request);
        if (responseMessage.IsSuccessStatusCode)
        {
            DeleteWorkerResponse response = (await responseMessage.Content.ReadFromJsonAsync<DeleteWorkerResponse>())!;
            return (Success: true, ErrorMessage: null, Response: response);
        }
        else
        {
            return (Success: false, ErrorMessage: await responseMessage.Content.ReadAsStringAsync() ?? "Unknown Error", Response: null);
        }
    }

    public async Task<(bool Success, string? ErrorMessage, ReactivateWorkerResponse? Response)> ReactivateWorker(ReactivateWorkerRequest request)
    {
        HttpResponseMessage responseMessage = await _httpClient.PostAsJsonAsync("api/Workers/ReactivateWorker", request);
        if (responseMessage.IsSuccessStatusCode)
        {
            ReactivateWorkerResponse response = (await responseMessage.Content.ReadFromJsonAsync<ReactivateWorkerResponse>())!;
            return (Success: true, ErrorMessage: null, Response: response);
        }
        else
        {
            return (Success: false, ErrorMessage: await responseMessage.Content.ReadAsStringAsync() ?? "Unknown Error", Response: null);
        }
    }

    public async Task<(bool Success, string? ErrorMessage, RunNowResponse? Response)> RunNow(RunNowRequest request)
    {
        HttpResponseMessage responseMessage = await _httpClient.PostAsJsonAsync("api/Workers/RunNow", request);
        if (responseMessage.IsSuccessStatusCode)
        {
            RunNowResponse response = (await responseMessage.Content.ReadFromJsonAsync<RunNowResponse>())!;
            return (Success: true, ErrorMessage: null, Response: response);
        }
        else
        {
            return (Success: false, ErrorMessage: await responseMessage.Content.ReadAsStringAsync() ?? "Unknown Error", Response: null);
        }
    }

    public async Task<(bool Success, string? ErrorMessage, CreateWorkerResponse? Response)> CreateWorker(CreateWorkerRequest request)
    {
        HttpResponseMessage responseMessage = await _httpClient.PostAsJsonAsync("api/Workers/CreateWorker", request);
        if (responseMessage.IsSuccessStatusCode)
        {
            CreateWorkerResponse response = (await responseMessage.Content.ReadFromJsonAsync<CreateWorkerResponse>())!;
            return (Success: true, ErrorMessage: null, Response: response);
        }
        else
        {
            return (Success: false, ErrorMessage: await responseMessage.Content.ReadAsStringAsync() ?? "Unknown Error", Response: null);
        }
    }

    public async Task<(bool Success, string? ErrorMessage, UpdateWorkerResponse? Response)> UpdateWorker(UpdateWorkerRequest request)
    {
        HttpResponseMessage responseMessage = await _httpClient.PostAsJsonAsync("api/Workers/UpdateWorker", request);
        if (responseMessage.IsSuccessStatusCode)
        {
            UpdateWorkerResponse response = (await responseMessage.Content.ReadFromJsonAsync<UpdateWorkerResponse>())!;
            return (Success: true, ErrorMessage: null, Response: response);
        }
        else
        {
            return (Success: false, ErrorMessage: await responseMessage.Content.ReadAsStringAsync() ?? "Unknown Error", Response: null);
        }
    }
}
